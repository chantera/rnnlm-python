# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rnnlm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rnnlm')
    _rnnlm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rnnlm', [dirname(__file__)])
        except ImportError:
            import _rnnlm
            return _rnnlm
        if fp is not None:
            try:
                _mod = imp.load_module('_rnnlm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rnnlm = swig_import_helper()
    del swig_import_helper
else:
    import _rnnlm
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rnnlm.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rnnlm.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rnnlm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rnnlm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rnnlm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rnnlm.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rnnlm.SwigPyIterator_copy(self)

    def next(self):
        return _rnnlm.SwigPyIterator_next(self)

    def __next__(self):
        return _rnnlm.SwigPyIterator___next__(self)

    def previous(self):
        return _rnnlm.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rnnlm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rnnlm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rnnlm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rnnlm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rnnlm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rnnlm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rnnlm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rnnlm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rnnlm.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rnnlm.StringVector___nonzero__(self)

    def __bool__(self):
        return _rnnlm.StringVector___bool__(self)

    def __len__(self):
        return _rnnlm.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _rnnlm.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rnnlm.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rnnlm.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rnnlm.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rnnlm.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rnnlm.StringVector___setitem__(self, *args)

    def pop(self):
        return _rnnlm.StringVector_pop(self)

    def append(self, x):
        return _rnnlm.StringVector_append(self, x)

    def empty(self):
        return _rnnlm.StringVector_empty(self)

    def size(self):
        return _rnnlm.StringVector_size(self)

    def swap(self, v):
        return _rnnlm.StringVector_swap(self, v)

    def begin(self):
        return _rnnlm.StringVector_begin(self)

    def end(self):
        return _rnnlm.StringVector_end(self)

    def rbegin(self):
        return _rnnlm.StringVector_rbegin(self)

    def rend(self):
        return _rnnlm.StringVector_rend(self)

    def clear(self):
        return _rnnlm.StringVector_clear(self)

    def get_allocator(self):
        return _rnnlm.StringVector_get_allocator(self)

    def pop_back(self):
        return _rnnlm.StringVector_pop_back(self)

    def erase(self, *args):
        return _rnnlm.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _rnnlm.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rnnlm.StringVector_push_back(self, x)

    def front(self):
        return _rnnlm.StringVector_front(self)

    def back(self):
        return _rnnlm.StringVector_back(self)

    def assign(self, n, x):
        return _rnnlm.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _rnnlm.StringVector_resize(self, *args)

    def insert(self, *args):
        return _rnnlm.StringVector_insert(self, *args)

    def reserve(self, n):
        return _rnnlm.StringVector_reserve(self, n)

    def capacity(self):
        return _rnnlm.StringVector_capacity(self)
    __swig_destroy__ = _rnnlm.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _rnnlm.StringVector_swigregister
StringVector_swigregister(StringVector)

MAX_STRING = _rnnlm.MAX_STRING
class neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neuron, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ac"] = _rnnlm.neuron_ac_set
    __swig_getmethods__["ac"] = _rnnlm.neuron_ac_get
    if _newclass:
        ac = _swig_property(_rnnlm.neuron_ac_get, _rnnlm.neuron_ac_set)
    __swig_setmethods__["er"] = _rnnlm.neuron_er_set
    __swig_getmethods__["er"] = _rnnlm.neuron_er_get
    if _newclass:
        er = _swig_property(_rnnlm.neuron_er_get, _rnnlm.neuron_er_set)

    def __init__(self):
        this = _rnnlm.new_neuron()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlm.delete_neuron
    __del__ = lambda self: None
neuron_swigregister = _rnnlm.neuron_swigregister
neuron_swigregister(neuron)

class synapse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synapse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synapse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weight"] = _rnnlm.synapse_weight_set
    __swig_getmethods__["weight"] = _rnnlm.synapse_weight_get
    if _newclass:
        weight = _swig_property(_rnnlm.synapse_weight_get, _rnnlm.synapse_weight_set)

    def __init__(self):
        this = _rnnlm.new_synapse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlm.delete_synapse
    __del__ = lambda self: None
synapse_swigregister = _rnnlm.synapse_swigregister
synapse_swigregister(synapse)

class vocab_word(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vocab_word, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vocab_word, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cn"] = _rnnlm.vocab_word_cn_set
    __swig_getmethods__["cn"] = _rnnlm.vocab_word_cn_get
    if _newclass:
        cn = _swig_property(_rnnlm.vocab_word_cn_get, _rnnlm.vocab_word_cn_set)
    __swig_setmethods__["word"] = _rnnlm.vocab_word_word_set
    __swig_getmethods__["word"] = _rnnlm.vocab_word_word_get
    if _newclass:
        word = _swig_property(_rnnlm.vocab_word_word_get, _rnnlm.vocab_word_word_set)
    __swig_setmethods__["prob"] = _rnnlm.vocab_word_prob_set
    __swig_getmethods__["prob"] = _rnnlm.vocab_word_prob_get
    if _newclass:
        prob = _swig_property(_rnnlm.vocab_word_prob_get, _rnnlm.vocab_word_prob_set)
    __swig_setmethods__["class_index"] = _rnnlm.vocab_word_class_index_set
    __swig_getmethods__["class_index"] = _rnnlm.vocab_word_class_index_get
    if _newclass:
        class_index = _swig_property(_rnnlm.vocab_word_class_index_get, _rnnlm.vocab_word_class_index_set)

    def __init__(self):
        this = _rnnlm.new_vocab_word()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlm.delete_vocab_word
    __del__ = lambda self: None
vocab_word_swigregister = _rnnlm.vocab_word_swigregister
vocab_word_swigregister(vocab_word)

TEXT = _rnnlm.TEXT
BINARY = _rnnlm.BINARY
COMPRESSED = _rnnlm.COMPRESSED
class CRnnLM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRnnLM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRnnLM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha_set"] = _rnnlm.CRnnLM_alpha_set_set
    __swig_getmethods__["alpha_set"] = _rnnlm.CRnnLM_alpha_set_get
    if _newclass:
        alpha_set = _swig_property(_rnnlm.CRnnLM_alpha_set_get, _rnnlm.CRnnLM_alpha_set_set)
    __swig_setmethods__["train_file_set"] = _rnnlm.CRnnLM_train_file_set_set
    __swig_getmethods__["train_file_set"] = _rnnlm.CRnnLM_train_file_set_get
    if _newclass:
        train_file_set = _swig_property(_rnnlm.CRnnLM_train_file_set_get, _rnnlm.CRnnLM_train_file_set_set)

    def __init__(self):
        this = _rnnlm.new_CRnnLM()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rnnlm.delete_CRnnLM
    __del__ = lambda self: None

    def random(self, min, max):
        return _rnnlm.CRnnLM_random(self, min, max)

    def setTrainFile(self, str):
        return _rnnlm.CRnnLM_setTrainFile(self, str)

    def setValidFile(self, str):
        return _rnnlm.CRnnLM_setValidFile(self, str)

    def setTestFile(self, str):
        return _rnnlm.CRnnLM_setTestFile(self, str)

    def setRnnLMFile(self, str):
        return _rnnlm.CRnnLM_setRnnLMFile(self, str)

    def setLMProbFile(self, str):
        return _rnnlm.CRnnLM_setLMProbFile(self, str)

    def setFileType(self, newt):
        return _rnnlm.CRnnLM_setFileType(self, newt)

    def setClassSize(self, newSize):
        return _rnnlm.CRnnLM_setClassSize(self, newSize)

    def setOldClasses(self, newVal):
        return _rnnlm.CRnnLM_setOldClasses(self, newVal)

    def setLambda(self, newLambda):
        return _rnnlm.CRnnLM_setLambda(self, newLambda)

    def setGradientCutoff(self, newGradient):
        return _rnnlm.CRnnLM_setGradientCutoff(self, newGradient)

    def setDynamic(self, newD):
        return _rnnlm.CRnnLM_setDynamic(self, newD)

    def setGen(self, newGen):
        return _rnnlm.CRnnLM_setGen(self, newGen)

    def setIndependent(self, newVal):
        return _rnnlm.CRnnLM_setIndependent(self, newVal)

    def setLearningRate(self, newAlpha):
        return _rnnlm.CRnnLM_setLearningRate(self, newAlpha)

    def setRegularization(self, newBeta):
        return _rnnlm.CRnnLM_setRegularization(self, newBeta)

    def setMinImprovement(self, newMinImprovement):
        return _rnnlm.CRnnLM_setMinImprovement(self, newMinImprovement)

    def setHiddenLayerSize(self, newsize):
        return _rnnlm.CRnnLM_setHiddenLayerSize(self, newsize)

    def setCompressionLayerSize(self, newsize):
        return _rnnlm.CRnnLM_setCompressionLayerSize(self, newsize)

    def setDirectSize(self, newsize):
        return _rnnlm.CRnnLM_setDirectSize(self, newsize)

    def setDirectOrder(self, newsize):
        return _rnnlm.CRnnLM_setDirectOrder(self, newsize)

    def setBPTT(self, newval):
        return _rnnlm.CRnnLM_setBPTT(self, newval)

    def setBPTTBlock(self, newval):
        return _rnnlm.CRnnLM_setBPTTBlock(self, newval)

    def setRandSeed(self, newSeed):
        return _rnnlm.CRnnLM_setRandSeed(self, newSeed)

    def setDebugMode(self, newDebug):
        return _rnnlm.CRnnLM_setDebugMode(self, newDebug)

    def setAntiKasparek(self, newAnti):
        return _rnnlm.CRnnLM_setAntiKasparek(self, newAnti)

    def setOneIter(self, newOneIter):
        return _rnnlm.CRnnLM_setOneIter(self, newOneIter)

    def setMaxIter(self, newMaxIter):
        return _rnnlm.CRnnLM_setMaxIter(self, newMaxIter)

    def getWordHash(self, word):
        return _rnnlm.CRnnLM_getWordHash(self, word)

    def readWord(self, word, fin):
        return _rnnlm.CRnnLM_readWord(self, word, fin)

    def searchVocab(self, word):
        return _rnnlm.CRnnLM_searchVocab(self, word)

    def readWordIndex(self, fin):
        return _rnnlm.CRnnLM_readWordIndex(self, fin)

    def addWordToVocab(self, word):
        return _rnnlm.CRnnLM_addWordToVocab(self, word)

    def learnVocabFromTrainFile(self):
        return _rnnlm.CRnnLM_learnVocabFromTrainFile(self)

    def saveWeights(self):
        return _rnnlm.CRnnLM_saveWeights(self)

    def restoreWeights(self):
        return _rnnlm.CRnnLM_restoreWeights(self)

    def saveContext(self):
        return _rnnlm.CRnnLM_saveContext(self)

    def restoreContext(self):
        return _rnnlm.CRnnLM_restoreContext(self)

    def saveContext2(self):
        return _rnnlm.CRnnLM_saveContext2(self)

    def restoreContext2(self):
        return _rnnlm.CRnnLM_restoreContext2(self)

    def initNet(self):
        return _rnnlm.CRnnLM_initNet(self)

    def saveNet(self):
        return _rnnlm.CRnnLM_saveNet(self)

    def goToDelimiter(self, delim, fi):
        return _rnnlm.CRnnLM_goToDelimiter(self, delim, fi)

    def restoreNet(self):
        return _rnnlm.CRnnLM_restoreNet(self)

    def netFlush(self):
        return _rnnlm.CRnnLM_netFlush(self)

    def netReset(self):
        return _rnnlm.CRnnLM_netReset(self)

    def computeNet(self, last_word, word):
        return _rnnlm.CRnnLM_computeNet(self, last_word, word)

    def learnNet(self, last_word, word):
        return _rnnlm.CRnnLM_learnNet(self, last_word, word)

    def copyHiddenLayerToInput(self):
        return _rnnlm.CRnnLM_copyHiddenLayerToInput(self)

    def trainNet(self):
        return _rnnlm.CRnnLM_trainNet(self)

    def useLMProb(self, use):
        return _rnnlm.CRnnLM_useLMProb(self, use)

    def testNet(self):
        return _rnnlm.CRnnLM_testNet(self)

    def testNbest(self):
        return _rnnlm.CRnnLM_testNbest(self)

    def testGen(self):
        return _rnnlm.CRnnLM_testGen(self)

    def matrixXvector(self, dest, srcvec, srcmatrix, matrix_width, arg6, to, from2, to2, type):
        return _rnnlm.CRnnLM_matrixXvector(self, dest, srcvec, srcmatrix, matrix_width, arg6, to, from2, to2, type)
CRnnLM_swigregister = _rnnlm.CRnnLM_swigregister
CRnnLM_swigregister(CRnnLM)
cvar = _rnnlm.cvar
PRIMES = cvar.PRIMES
PRIMES_SIZE = cvar.PRIMES_SIZE
MAX_NGRAM_ORDER = cvar.MAX_NGRAM_ORDER

class CRnnLME(CRnnLM):
    __swig_setmethods__ = {}
    for _s in [CRnnLM]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRnnLME, name, value)
    __swig_getmethods__ = {}
    for _s in [CRnnLM]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRnnLME, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rnnlm.new_CRnnLME()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getProb(self, words):
        return _rnnlm.CRnnLME_getProb(self, words)
    __swig_destroy__ = _rnnlm.delete_CRnnLME
    __del__ = lambda self: None
CRnnLME_swigregister = _rnnlm.CRnnLME_swigregister
CRnnLME_swigregister(CRnnLME)

# This file is compatible with both classic and new-style classes.


